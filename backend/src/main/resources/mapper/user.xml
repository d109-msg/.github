<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.msg.user.model.mapper.UserMapper">

	<select id="findUserByEmailId" parameterType="string"
		resultType="UserDto">
		select email_id, email_password, nickname, provider,
		identifier, flag_admin, refresh_token, sign_in_time, sign_up_time,
		flag_private, flag_identifier, image_url, image_uuid
		from users
		where
		email_id =
		#{emailId}
	</select>

	<select id="getUserInfo" parameterType="string"
		resultType="UserInfoDto">
		select nickname, email_id, provider,
		identifier, flag_admin,
		sign_in_time, sign_up_time,
		flag_private, flag_identifier, image_url,
		image_uuid
		from users
		where email_id =
		#{emailId}
	</select>

	<insert id="signUpWithOauth2" parameterType="Oauth2Dto">
		insert into users
		(nickname, email_id, provider, refresh_token, sign_in_time) values
		(#{nickname},
		#{emailId},
		#{provider}, #{refreshToken}, now())
	</insert>

	<update id="signInWithOauth2" parameterType="map">
		update users set
		refresh_token = #{refreshToken}, sign_in_time = now()
		where email_id =
		#{emailId}
	</update>

	<insert id="signUp" parameterType="SignUpDto">
		insert into users
		(nickname,
		email_id, email_password) values (#{nickname}, #{emailId},
		#{emailPassword})
	</insert>

	<update id="signIn" parameterType="UserDto">
		update users set
		refresh_token
		= #{refreshToken}, sign_in_time = now()
		where email_id = #{emailId}
	</update>

	<update id="signOut" parameterType="string">
		update users set
		refresh_token = null where email_id = #{emailId}
	</update>

	<delete id="withdraw" parameterType="string">
		delete from users where
		email_id = #{emailId}
	</delete>

	<update id="updateNickname" parameterType="UserDto">
		update users set
		nickname = #{nickname}
		where email_id = #{emailId}
	</update>

	<update id="updatePassword" parameterType="UserDto">
		update users set
		email_password = #{emailPassword}
		where email_id = #{emailId}
	</update>

	<update id="updateIdentifier" parameterType="UserDto">
		update users set
		identifier = #{identifier}, flag_identifier = #{flagIdentifier}
		where
		email_id = #{emailId}
	</update>

	<update id="updateImage" parameterType="ProfileImageDto">
		update users set
		image_url = #{imageUrl}, image_uuid = #{imageUuid}
		where email_id =
		#{emailId}
	</update>

	<insert id="follow" parameterType="FollowDetailDto">
		insert into follows
		(from_user_email_id, to_user_email_id) values
		(#{fromUserEmailId},
		#{toUserEmailId})
	</insert>

	<select id="findFollow" parameterType="FollowDetailDto"
		resultType="FollowFindDto">
		select id, from_user_email_id, to_user_email_id
		from follows
		where from_user_email_id = #{fromUserEmailId}
		and to_user_email_id =
		#{toUserEmailId}
	</select>

	<delete id="unfollow" parameterType="FollowDetailDto">
		delete from follows where
		from_user_email_id = #{fromUserEmailId}
		and to_user_email_id =
		#{toUserEmailId}
	</delete>

	<select id="getFollowList" parameterType="FollowParamDto"
		resultType="FollowUserDto">
		<choose>
			<when test="type == 'to'">
				select u.email_id, u.nickname, u.image_url,
				u.image_uuid, u.identifier,
				f.id
				from follows f
				join users u on
				f.from_user_email_id = u.email_id
				where f.to_user_email_id =
				#{emailId}
				and f.id > #{offset}
				and u.nickname like concat('%', #{keyword}, '%')
				order by f.id asc
				limit #{limit}
			</when>
			<when test="type == 'from'">
				select u.email_id, u.nickname, u.image_url,
				u.image_uuid, u.identifier,
				f.id
				from follows f
				join users u on
				f.to_user_email_id = u.email_id
				where f.from_user_email_id =
				#{emailId}
				and f.id > #{offset}
				and u.nickname like concat('%', #{keyword}, '%')
				order by f.id asc
				limit #{limit}
			</when>
		</choose>
	</select>
</mapper>

