<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.ssafy.msg.game.model.mapper.GameMapper">

	<insert id="createNewMission" parameterType="NewMissionDto">
		INSERT INTO daily_missions (participant_id, try, flag_success, mission_id, day)
		SELECT p.id, 0, 0, #{missionId}, #{day}
		FROM participants p
		WHERE p.room_id = #{roomId};
	</insert>

	<select id="getRandomMission" parameterType="string" resultType="int">
		SELECT
			m.id
		FROM
			missions m
		WHERE
			m.id NOT IN (
				SELECT
					dm.mission_id
				FROM
					daily_missions dm
						JOIN
					participants p ON dm.participant_id = p.id
				WHERE
					p.room_id = #{roomId}
			)
		ORDER BY
			RAND()
			LIMIT 1;
	</select>

	<select id="getMyVote" parameterType="int" resultType="myVoteDto">
		SELECT
				(SELECT nickname FROM participants WHERE id = dm.normal_vote) AS normal_vote,
				(SELECT nickname FROM participants WHERE id = dm.mafia_vote) AS mafia_vote,
				(SELECT nickname FROM participants WHERE id = dm.doctor_vote) AS doctor_vote
		FROM
			daily_missions dm
		WHERE
			dm.participant_id = #{userId};
	</select>

	<update id="normalVote" parameterType="Map">
		UPDATE daily_missions
		SET normal_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = (
				  SELECT MAX(day)
				  FROM daily_missions
				  WHERE participant_id = #{participantId}
			  );
	</update>

	<update id="mafiaVote" parameterType="Map">
		UPDATE daily_missions
		SET mafia_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = (
				  SELECT MAX(day)
				  FROM daily_missions
				  WHERE participant_id = #{participantId}
			  );
	</update>

	<update id="doctorVote" parameterType="Map">
		UPDATE daily_missions
		SET docotr_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = (
				  SELECT MAX(day)
				  FROM daily_missions
				  WHERE participant_id = #{participantId}
			  );
	</update>

	<select id="getAliveParticipants" resultType="ParticipantDto" parameterType="string">
		SELECT *
		FROM participants
		WHERE room_id = #{roomId} AND flag_die = 0;
	</select>

	<select id="getParticipantWithPId" resultType="ParticipantDto" parameterType="int">
		SELECT * FROM participants WHERE id = #{participantId};
	</select>

	<select id="getParticipant" resultType="ParticipantDto" parameterType="ParticipantReceiveDto">
		SELECT * FROM participants WHERE user_id = #{userId} AND room_id = #{roomId};
	</select>

	<select id="getRoomVote" resultType="VoteResultDto" parameterType="string">
		SELECT
			p.id,
			p.nickname,
			COUNT(CASE WHEN dm.normal_vote = p.id THEN 1 ELSE NULL END) AS normal_vote_count,
			COUNT(CASE WHEN dm.mafia_vote = p.id THEN 1 ELSE NULL END) AS mafia_vote_count,
			COUNT(CASE WHEN dm.doctor_vote = p.id THEN 1 ELSE NULL END) AS doctor_vote_count
		FROM
			participants p
				LEFT JOIN
			daily_missions dm ON p.id IN (dm.normal_vote, dm.mafia_vote, dm.doctor_vote) AND dm.day = (
				SELECT MAX(day) FROM daily_missions
										 JOIN participants ON daily_missions.participant_id = participants.id
				WHERE participants.room_id = #{roomId}
			)
				JOIN
			rooms r ON p.room_id = r.id
		WHERE
			r.id = #{roomId}
		GROUP BY
			p.id;
	</select>

	<select id="getUserRooms" parameterType="integer" resultType="RoomDto">
		SELECT r.*
		FROM rooms r
				 JOIN participants p ON r.id = p.room_id
		WHERE (r.data_type = '랜덤' OR r.data_type = '그룹') AND end_time IS  NULL
		  AND p.user_id = #{userId};
	</select>

	<insert id="insertParticipants" parameterType="ParticipantDto">
		INSERT INTO participants
		(room_id, user_id, job_id, nickname, image_url)
		VALUES
			<foreach collection="list" item="participant" separator=",">
				(#{participant.roomId}, #{participant.userId}, #{participant.jobId}, #{participant.nickname}, #{participant.imageUrl})
			</foreach>
	</insert>

	<delete id="deleteParticipant" parameterType="int">
		DELETE
		FROM participants
		WHERE room_id = 'room1' AND user_id = #{userId}
	</delete>

	<select id="getRandomNicknames" parameterType="int"
			resultType="RandomNameDto">
		SELECT
			fn.id AS first_name,
			ln.id AS last_name,
			img.url as img_url
		FROM
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM first_nicknames ORDER BY RAND()) as fn
				JOIN
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM last_nicknames ORDER BY RAND()) as ln
			ON fn.rownum = ln.rownum
				JOIN
			(SELECT url, ROW_NUMBER() OVER () AS rownum FROM nickname_images ORDER BY RAND()) as img
			ON ln.rownum = img.rownum
			LIMIT #{limit};
	</select>

	<select id="getRandomRoomName" resultType="RandomNameDto">
		SELECT
			fn.id AS first_name,
			ln.id AS last_name,
			img.url as img_url
		FROM
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM first_room_names ORDER BY RAND()) as fn
				JOIN
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM last_room_names ORDER BY RAND()) as ln
			ON fn.rownum = ln.rownum
				JOIN
			(SELECT url, ROW_NUMBER() OVER () AS rownum FROM room_images ORDER BY RAND()) as img
			ON ln.rownum = img.rownum
			LIMIT 1;
	</select>

	<select id="getRandomGameApplyStatus" parameterType="int" resultType="boolean">
		SELECT EXISTS(
			SELECT 1
			FROM participants
			WHERE user_id = #{userId}
			  AND room_id = 'room1'
		) AS RandomGameApplyStatus;
	</select>

	<insert id="applyRandomGame" parameterType="UserDto">
		insert into participants
			(room_id, user_id, image_url, nickname) values ("room1", #{id}, #{imageUrl}, #{nickname})
	</insert>

	<select id="isParticipantInRoom" parameterType="EnterGroupRoomDto" resultType="boolean">
		SELECT EXISTS(
			SELECT 1
			FROM participants
			WHERE user_id = #{userId}
			  AND room_id = #{roomId}
		) AS IsParticipantInRoom;
	</select>
</mapper>

